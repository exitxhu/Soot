// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Soot.Db.Ef;

#nullable disable

namespace Soot.Db.Ef.Migrations
{
    [DbContext(typeof(SootContext))]
    [Migration("20220517131005_notifLong")]
    partial class notifLong
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Soot.Domain.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactId"), 1L, 1);

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("InboxId")
                        .HasColumnType("int");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("WebSocket")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("ContactId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Soot.Domain.Contact+ExternalContactMapping", b =>
                {
                    b.Property<int>("ExternalContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExternalContactId"), 1L, 1);

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalSourceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExternalContactId");

                    b.HasIndex("ContactId");

                    b.ToTable("ExternalContactMappings");
                });

            modelBuilder.Entity("Soot.Domain.Inbox", b =>
                {
                    b.Property<int>("InboxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InboxId"), 1L, 1);

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InboxId");

                    b.HasIndex("ContactId")
                        .IsUnique();

                    b.ToTable("Inbox");
                });

            modelBuilder.Entity("Soot.Domain.Inbox+InboxItem", b =>
                {
                    b.Property<int>("InboxItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InboxItemId"), 1L, 1);

                    b.Property<int>("InboxId")
                        .HasColumnType("int");

                    b.Property<long>("NotificationId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("InboxItemId");

                    b.HasIndex("InboxId");

                    b.HasIndex("NotificationId");

                    b.ToTable("InboxItems");
                });

            modelBuilder.Entity("Soot.Domain.Inbox+InboxItemActions", b =>
                {
                    b.Property<int>("InboxItemActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InboxItemActionId"), 1L, 1);

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ActionType")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InboxItemId")
                        .HasColumnType("int");

                    b.HasKey("InboxItemActionId");

                    b.HasIndex("InboxItemId");

                    b.ToTable("InboxItemActions");
                });

            modelBuilder.Entity("Soot.Domain.Notification", b =>
                {
                    b.Property<long>("NotificaionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("NotificaionId"), 1L, 1);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("Types")
                        .HasColumnType("int");

                    b.HasKey("NotificaionId");

                    b.HasIndex("ContactId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Soot.Domain.Notification+SendAction", b =>
                {
                    b.Property<int>("SendActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SendActionId"), 1L, 1);

                    b.Property<long>("NotificationId")
                        .HasColumnType("bigint");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("RetryCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SendType")
                        .HasColumnType("int");

                    b.HasKey("SendActionId");

                    b.HasIndex("NotificationId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("SendActions");
                });

            modelBuilder.Entity("Soot.Domain.Notification+SendResult", b =>
                {
                    b.Property<int>("SendResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SendResultId"), 1L, 1);

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRetry")
                        .HasColumnType("bit");

                    b.Property<int>("Result")
                        .HasColumnType("int");

                    b.Property<DateTime>("ResultDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SendActionId")
                        .HasColumnType("int");

                    b.HasKey("SendResultId");

                    b.HasIndex("SendActionId");

                    b.ToTable("SendResults");
                });

            modelBuilder.Entity("Soot.Domain.Contact+ExternalContactMapping", b =>
                {
                    b.HasOne("Soot.Domain.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Soot.Domain.Inbox", b =>
                {
                    b.HasOne("Soot.Domain.Contact", "Contact")
                        .WithOne("Inbox")
                        .HasForeignKey("Soot.Domain.Inbox", "ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Soot.Domain.Inbox+InboxItem", b =>
                {
                    b.HasOne("Soot.Domain.Inbox", "Inbox")
                        .WithMany("Items")
                        .HasForeignKey("InboxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Soot.Domain.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inbox");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("Soot.Domain.Inbox+InboxItemActions", b =>
                {
                    b.HasOne("Soot.Domain.Inbox+InboxItem", "InboxItem")
                        .WithMany("InboxItemActions")
                        .HasForeignKey("InboxItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InboxItem");
                });

            modelBuilder.Entity("Soot.Domain.Notification", b =>
                {
                    b.HasOne("Soot.Domain.Contact", null)
                        .WithMany("Notifications")
                        .HasForeignKey("ContactId");
                });

            modelBuilder.Entity("Soot.Domain.Notification+SendAction", b =>
                {
                    b.HasOne("Soot.Domain.Notification", "Notification")
                        .WithMany("SendActions")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Soot.Domain.Contact", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("Soot.Domain.Notification+SendResult", b =>
                {
                    b.HasOne("Soot.Domain.Notification+SendAction", "SendAction")
                        .WithMany("SendResults")
                        .HasForeignKey("SendActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SendAction");
                });

            modelBuilder.Entity("Soot.Domain.Contact", b =>
                {
                    b.Navigation("Inbox")
                        .IsRequired();

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Soot.Domain.Inbox", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Soot.Domain.Inbox+InboxItem", b =>
                {
                    b.Navigation("InboxItemActions");
                });

            modelBuilder.Entity("Soot.Domain.Notification", b =>
                {
                    b.Navigation("SendActions");
                });

            modelBuilder.Entity("Soot.Domain.Notification+SendAction", b =>
                {
                    b.Navigation("SendResults");
                });
#pragma warning restore 612, 618
        }
    }
}
