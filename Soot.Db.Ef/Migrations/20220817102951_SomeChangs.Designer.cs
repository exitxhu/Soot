// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Soot.Db.Ef;

#nullable disable

namespace Soot.Db.Ef.Migrations
{
    [DbContext(typeof(SootContext))]
    [Migration("20220817102951_SomeChangs")]
    partial class SomeChangs
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Soot")
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Soot.Domain.Entities.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ContactId"));

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("InboxId")
                        .HasColumnType("integer");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("WebSocket")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("ContactId");

                    b.ToTable("Contacts", "Soot");
                });

            modelBuilder.Entity("Soot.Domain.Entities.Contact+ContactTag", b =>
                {
                    b.Property<int>("ContactTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ContactTagId"));

                    b.Property<int>("ContactId")
                        .HasColumnType("integer");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ContactTagId");

                    b.HasIndex("ContactId");

                    b.ToTable("ContactTags", "Soot");
                });

            modelBuilder.Entity("Soot.Domain.Entities.Contact+ExternalContactMapping", b =>
                {
                    b.Property<int>("ExternalContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ExternalContactId"));

                    b.Property<int>("ContactId")
                        .HasColumnType("integer");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExternalSourceName")
                        .HasColumnType("text");

                    b.HasKey("ExternalContactId");

                    b.HasIndex("ContactId");

                    b.ToTable("ExternalContactMappings", "Soot");
                });

            modelBuilder.Entity("Soot.Domain.Entities.Inbox", b =>
                {
                    b.Property<int>("InboxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InboxId"));

                    b.Property<int>("ContactId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("InboxId");

                    b.HasIndex("ContactId")
                        .IsUnique();

                    b.ToTable("Inbox", "Soot");
                });

            modelBuilder.Entity("Soot.Domain.Entities.Inbox+InboxItem", b =>
                {
                    b.Property<int>("InboxItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InboxItemId"));

                    b.Property<int>("InboxId")
                        .HasColumnType("integer");

                    b.Property<long>("NotificationId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("InboxItemId");

                    b.HasIndex("InboxId");

                    b.HasIndex("NotificationId");

                    b.ToTable("InboxItems", "Soot");
                });

            modelBuilder.Entity("Soot.Domain.Entities.Inbox+InboxItemActions", b =>
                {
                    b.Property<int>("InboxItemActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InboxItemActionId"));

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ActionType")
                        .HasColumnType("integer");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("InboxItemId")
                        .HasColumnType("integer");

                    b.HasKey("InboxItemActionId");

                    b.HasIndex("InboxItemId");

                    b.ToTable("InboxItemActions", "Soot");
                });

            modelBuilder.Entity("Soot.Domain.Entities.Notification", b =>
                {
                    b.Property<long>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("NotificationId"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ContactId")
                        .HasColumnType("integer");

                    b.HasKey("NotificationId");

                    b.HasIndex("ContactId");

                    b.ToTable("Notifications", "Soot");
                });

            modelBuilder.Entity("Soot.Domain.Entities.Notification+SendAction", b =>
                {
                    b.Property<int>("SendActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SendActionId"));

                    b.Property<bool>("IsDeliveryRequested")
                        .HasColumnType("boolean");

                    b.Property<long>("NotificationId")
                        .HasColumnType("bigint");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("integer");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SendType")
                        .HasColumnType("integer");

                    b.HasKey("SendActionId");

                    b.HasIndex("NotificationId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("SendActions", "Soot");
                });

            modelBuilder.Entity("Soot.Domain.Entities.Notification+SendResult", b =>
                {
                    b.Property<int>("SendResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SendResultId"));

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsRetry")
                        .HasColumnType("boolean");

                    b.Property<int>("Result")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ResultDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SendActionId")
                        .HasColumnType("integer");

                    b.HasKey("SendResultId");

                    b.HasIndex("SendActionId");

                    b.ToTable("SendResults", "Soot");
                });

            modelBuilder.Entity("Soot.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TagId"));

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TagId");

                    b.ToTable("Tags", "Soot");
                });

            modelBuilder.Entity("Soot.Domain.Entities.Contact+ContactTag", b =>
                {
                    b.HasOne("Soot.Domain.Entities.Contact", "Contact")
                        .WithMany("Tags")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Soot.Domain.Entities.Contact+ExternalContactMapping", b =>
                {
                    b.HasOne("Soot.Domain.Entities.Contact", "Contact")
                        .WithMany("ExternalMappings")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Soot.Domain.Entities.Inbox", b =>
                {
                    b.HasOne("Soot.Domain.Entities.Contact", "Contact")
                        .WithOne("Inbox")
                        .HasForeignKey("Soot.Domain.Entities.Inbox", "ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Soot.Domain.Entities.Inbox+InboxItem", b =>
                {
                    b.HasOne("Soot.Domain.Entities.Inbox", "Inbox")
                        .WithMany("Items")
                        .HasForeignKey("InboxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Soot.Domain.Entities.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inbox");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("Soot.Domain.Entities.Inbox+InboxItemActions", b =>
                {
                    b.HasOne("Soot.Domain.Entities.Inbox+InboxItem", "InboxItem")
                        .WithMany("InboxItemActions")
                        .HasForeignKey("InboxItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InboxItem");
                });

            modelBuilder.Entity("Soot.Domain.Entities.Notification", b =>
                {
                    b.HasOne("Soot.Domain.Entities.Contact", null)
                        .WithMany("Notifications")
                        .HasForeignKey("ContactId");
                });

            modelBuilder.Entity("Soot.Domain.Entities.Notification+SendAction", b =>
                {
                    b.HasOne("Soot.Domain.Entities.Notification", "Notification")
                        .WithMany("SendActions")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Soot.Domain.Entities.Contact", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("Soot.Domain.Entities.Notification+SendResult", b =>
                {
                    b.HasOne("Soot.Domain.Entities.Notification+SendAction", "SendAction")
                        .WithMany("SendResults")
                        .HasForeignKey("SendActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SendAction");
                });

            modelBuilder.Entity("Soot.Domain.Entities.Contact", b =>
                {
                    b.Navigation("ExternalMappings");

                    b.Navigation("Inbox")
                        .IsRequired();

                    b.Navigation("Notifications");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Soot.Domain.Entities.Inbox", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Soot.Domain.Entities.Inbox+InboxItem", b =>
                {
                    b.Navigation("InboxItemActions");
                });

            modelBuilder.Entity("Soot.Domain.Entities.Notification", b =>
                {
                    b.Navigation("SendActions");
                });

            modelBuilder.Entity("Soot.Domain.Entities.Notification+SendAction", b =>
                {
                    b.Navigation("SendResults");
                });
#pragma warning restore 612, 618
        }
    }
}
